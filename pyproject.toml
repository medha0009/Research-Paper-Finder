[tool.poetry]
name = "research-paper-finder"
version = "0.1.0"
description = "A tool to find research papers with pharmaceutical/biotech company affiliations"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
packages = [{include = "research_paper_finder"}]
homepage = "https://github.com/yourusername/research-paper-finder"
repository = "https://github.com/yourusername/research-paper-finder"
documentation = "https://github.com/yourusername/research-paper-finder#readme"
keywords = ["pubmed", "research", "papers", "pharmaceutical", "biotech"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
requests = "^2.31.0"
pandas = "^2.2.0"
python-dotenv = "^1.0.0"
tqdm = "^4.66.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
black = "^23.7.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.9.0"
types-requests = "^2.32.0"
pandas-stubs = "^2.2.3"
types-tqdm = "^4.67.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
get-papers-list = "research_paper_finder.cli:main"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100

class ResearchPaperFinderError(Exception):
    """Base exception for ResearchPaperFinder."""
    pass

class APIError(ResearchPaperFinderError):
    """Raised when there's an error with the PubMed API."""
    pass

class ParseError(ResearchPaperFinderError):
    """Raised when there's an error parsing API response."""
    pass

class ValidationError(ResearchPaperFinderError):
    """Raised when input validation fails."""
    pass

def validate_query(self, query: str) -> None:
    if not query or not query.strip():
        raise ValidationError("Search query cannot be empty")
    if len(query) > 1000:
        raise ValidationError("Search query is too long (max 1000 characters)")

def _make_api_request(self, url: str, params: Dict[str, Any], max_retries: int = 3) -> APIResponse:
    for attempt in range(max_retries):
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            return APIResponse(...)
        except requests.exceptions.RequestException as e:
            if attempt == max_retries - 1:
                raise APIError(f"Failed after {max_retries} attempts: {str(e)}") from e
            time.sleep(2 ** attempt)  # Exponential backoff

try:
    search_data = requests.get(response.url).json()
    pmids = cast(List[str], search_data.get('esearchresult', {}).get('idlist', []))
except (ValueError, KeyError) as e:
    raise ParseError(f"Failed to parse search results: {str(e)}") from e

# Split into batches of 100 to avoid API limitations
batch_size = 100
for i in range(0, len(pmids), batch_size):
    batch_pmids = pmids[i:i+batch_size]

def main(args: Optional[List[str]] = None) -> int:
    try:
        # ... main logic ...
    except ValueError as e:
        print(f"Error: Invalid number for maximum results. Please enter a valid number.")
        return 1
    except Exception as e:
        print(f"Error: {e}")
        if debug_mode:
            import traceback
            traceback.print_exc()
        return 1

# Graceful handling of missing data with defaults
corresponding_email = "N/A"
non_academic_authors = []
company_affiliations = set()

# Respect API rate limits
import time
time.sleep(0.5)

def save_to_csv(self, papers: List[PaperInfo], output_file: Optional[str] = None) -> None:
    try:
        if output_file:
            df.to_csv(output_file, index=False)
    except (IOError, PermissionError) as e:
        raise ValidationError(f"Failed to save file {output_file}: {str(e)}") 